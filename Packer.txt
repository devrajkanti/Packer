1. Why we use Packer?
	- It helps to create images based on the platform i.e. helps to create image for AMI or Azure or VM Ware or Docker

2. Packer Config -
	- What I want my image to look like?

3. What is HashiCorp Packer?
	- Open source machine image creation tool
	- Automates the installation and configuration on packer made images
	- Works with multiple envoirnmemts i.e. with a single template images can be made for other clud like GCP, AWS, etc
	- Eliminate all manual steps for image creation
	
4. Packer builds images using a template

5. Templates can be build using either JSON or HCL2(HashiCorp Configuration Language)

6. Template defines settings using blocks - 
	- Original Image to use(source)
	- Where to build the image(AWS, VMware, OpenStack)
	- Files to upload to the Image(scripts, packages, certificates)
	- Installation and Configuration of the Machine Image
	- Data to Retrieve when Building

**Core Components of Packers

7. Source block
	- Defines the initial image to use to create your customized image. Any defined source is reusable within build blocks.
	- Building a new AWS image (AMI) we need to point to an existing AMI to customize.
	- Source block defines what kind of virtualization to use for the image, how to launch the image.
	- In the example the amazon-ebs builder configuration launches a t2.micro AMI in the us-west-2 region.
	- Example
		source "amazon-ebs" "ubuntu"{
			ami_name		=	"ubuntu-image-aws"
			instance_type 	= 	"t2.micro"
			region 			= 	"us-west-2"
			ami_id			=	"ami-a1b2c3d4e5"
			source_ami_filter {
				filters = {
					name					= 	"ubuntu/images/*ubuntu-xenial-16.04-amd-server-*"
					root-device-type		=	"ebs"
					virtualization-type		=	"hvm"
				}
				most_recent		=	true
				owners			=	["987875877568"]
			}
		}

8. Builders 
	- Builders are responsible for creating machines from the base image, customizing the image as defined(like where to upload it and the scripts we want to execute) and then creating the resulting image.
	- Builders are plugin that are developed to work with a specific platform.
	- Everything done to the image is done withing the BUILD block.
	- This is where the customization work happens.

9. Provisioners 
	- Provisioners use built-in and third-party integrations to install packages and configure the machine image.
	- Built-in integrations include file and different shell options
	- Use file provisionar to upload different files to our image
	- Shell provisioners - Execute scripts or other files on our resltatnt image

10. Post-processors
	- Post-processors are executed after the image is built and provisioners are complete. It can be used to upload artifacts, execute uploaded scripts, validate installs, or import an image.
	- Examples 
		- Validate a package using checksum
		- Import a package to AWS as an AMI
		
11. Communicators
	- Communicators are the mechanism that Packer will use to communicate with the new build and upload files, execute scripts, etc
	- Two communicators available today 
		- SSH
		- WinRM

12. Variables
	- HashiCorp Packer can use variables to define defaults during a build.
	- Variables can be declared in a .pkrvars.hcl file or .auto.pkrvars.hcl the default .pkr file or any other file name if references when executing the build

13. Logging for Packer - Be default it doesnt have a detailed ooging mechanish, we need to enable it.
	- $ export PACKER_LOG = 1 --> Enable detailed log
	- $ export PACKER_LOG_PATH = /var/log/packer.log --> Set a path for logs
	- $ packer build base-image.pkr.hcl --> Run the packer build
	
14. Packer Workflow
	HCL2 Template --> Packer Build --> Provision Instance --> Run Provisioners --> Create AMI --> Register AMI -- > Destroy Instance
																	^								|	
																	|								|
																	|								|
																	|								V
																Artifacts						New Image :)	
																
	- After hitting Packer build it reaches to AWS and provision instance for us

15. How to set AWS Credentials, Access key, secret keys and session in envoirnmnet variables

16. Writing packer templates
	- Templates consists of declarations and command, such as what plugins(builders, provisioners, etc.) to use, how to configure the plugins and what order to run them
	- Plugins are builders, provisioners, post-processors
	- Packer templates supports two formats - JSON and HCL2
	- Packer template are easy to develop and read.
	
17. HCL2
	- HashiCorp is moving to HCL2 as the standard format for Packer 1.7+
	- HCL is designed to strike a balance between human readable and machine parsable.

18. HCL Formatting - 
	- Confgigueartion format is VCS friendly i.e. multi-line lists, trailing commas, auto-formatting
	- Only code blocks built into the HCL language are avialable for use
	- Packer uses a standard file name for simplicity <name>pkr.hcl
	- Uses syntax constructs like Blocks and Arguments
	- New features will only be implmented for the HCL format moving forward
	- HCL Syntax - 
		<BLOCK TYPE> "<BLOCK LABEL>" "<BLOCK LABEL>" {
			<IDENTIFIER> = <EXPRESSION>
			<IDENTIFIER> = <EXPRESSION>
			<IDENTIFIER> = <EXPRESSION>
		}
	- Ordering of the blocks is not mandatory
	- We can have blocks which are referred to the other files as well.
	- The order of provisioners or post-processor blocks within a build is th eonly major feature where block order matters
	- Single line comment - # or //
	- Multi line comment /* Multi lines */
	- 
																